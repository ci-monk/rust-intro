use std::io;
use std::cmp::Ordering;
use rand::Rng;

/*
Para obter a informaÃ§Ã£o do usuÃ¡rio e, em seguida, imprimir o resultado como saÃ­da, precisamos
trazer a biblioteca io, de entrada e saÃ­da, para o escopo. A lib io vem da biblioteca padrÃ§ao
conhecida como std.

Rust vem com uma variedade de coisas em sua biblioteca padrÃ£o.
No entanto, se vocÃª tivesse que importar manualmente cada coisa que vocÃª usou, seria muito prolixo.
Mas importar muitas coisas que um programa nunca usa tambÃ©m nÃ£o Ã© bom. Um equilÃ­brio precisa ser alcanÃ§ado.

O prelÃºdio Ã© a lista de coisas que o Rust importa automaticamente para cada programa do Rust.
Ã‰ mantido o mais pequeno possÃ­vel e Ã© focado nas coisas, particularmente nas caracterÃ­sticas,
que sÃ£o usadas em quase todos os programas Rust.

PrelÃºdios podem ser vistos como um padrÃ£o para tornar o uso de vÃ¡rios tipos mais conveniente.
Como tal, vocÃª encontrarÃ¡ outros prelÃºdios na biblioteca padrÃ£o, como std::io::prelude.

Por padrÃ£o o Rust traz apenas alguns tipos no Ã¢mbito de cada programa no prelÃºdio.
Se um tipo que vocÃª deseja usar nÃ£o estÃ¡ no prelÃºdio, vocÃª deve trazer aquele tipo para
o escopo explicitamente com uma use declaraÃ§Ã£o.

O uso da biblioteca std::io fornece vÃ¡rios recursos Ãºteis, incluindo a capacidade de aceitar entradas do usuÃ¡rio.
*/
fn welcome(){
    println!("-------------------\n");
    println!("- Guess the number!\n");
    println!("-------------------");
}

fn main() {
    welcome();

    let numero_secreto = rand::thread_rng().gen_range(1..101);
    println!("O nÃºmero secreto gerado foi: {}\n", numero_secreto);

    let mut numero = String::new();

    loop {
        numero.clear();

        println!("Por favor, informe seu nÃºmero:");
        io::stdin()
            .read_line(&mut numero)
            .expect("Falha ao ler a linha");

        let convert: u32 = match numero.trim().parse() {
            Ok(num) => num,
            Err(err) => {
                println!("Error: {}", err);
                continue;
            },
        };

        println!("O nÃºmero digitado foi: {}", numero);

        match convert.cmp(&numero_secreto) {
            Ordering::Less => println!("ğŸ¥¶ Muito pequeno!"),
            Ordering::Greater => println!("ğŸ¥µ Muito grande!"),
            Ordering::Equal => {
                println!("ğŸ˜‚ Ganhou!");
                break;
            }
        }
    }
}
